'''
uses a data set re; fuel consumption to explore linear regression
'''

import piplite
await piplite.install(['pandas'])
await piplite.install(['matplotlib'])
await piplite.install(['numpy'])
await piplite.install(['scikit-learn'])

import matplotlib.pyplot as plt
import pandas as pd
import pylab as pl
import numpy as np
%matplotlib inline

path= "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-ML0101EN-SkillsNetwork/labs/Module%202/data/FuelConsumptionCo2.csv"

from pyodide.http import pyfetch

async def download(url, filename):
    response = await pyfetch(url)
    if response.status == 200:
        with open(filename, "wb") as f:
            f.write(await response.bytes())

await download(path, "FuelConsumption.csv")
path="FuelConsumption.csv"

df = pd.read_csv(path, "FuelConsumption.csv")

#df.head()

#df.describe()

cdf = df[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB','CO2EMISSIONS']]
#cdf.head(9)

'''
plotting features via histogram and scatter
'''
viz = cdf[['CYLINDERS','ENGINESIZE','CO2EMISSIONS','FUELCONSUMPTION_COMB']]
viz.hist()
plt.show()

#plot featuers against emission, to see the nature of their possibly linear relationship

plt.scatter(cdf.FUELCONSUMPTION_COMB, cdf.CO2EMISSIONS,  color='blue')
plt.xlabel("FUELCONSUMPTION_COMB")
plt.ylabel("Emission")
plt.show()

plt.scatter(cdf.ENGINESIZE, cdf.CO2EMISSIONS,  color='blue')
plt.xlabel("Engine size")
plt.ylabel("Emission")
plt.show()

plt.scatter(cdf.CYLINDERS, cdf.CO2EMISSIONS, color='blue')
plt.xlabel("No. of cylinders")
plt.ylabel("Emissions")
plt.show()

'''
creating train and test dataset
we'll be splitting 80/20, where 80% of data will be used for training and 20% for testing
'''
msk=np.random.rand(len(df)) <0.8
train=cdf[msk]
test=cdf[~msk]

#simple regression model
plt.scatter(train.ENGINESIZE, train.CO2EMISSIONS,  color='blue')
plt.xlabel("Engine size")
plt.ylabel("Emission")
plt.show()

from sklearn import linear_model
regr = linear_model.LinearRegression()
train_x = np.asanyarray(train[['ENGINESIZE']])
train_y = np.asanyarray(train[['CO2EMISSIONS']])
regr.fit(train_x, train_y)
# The coefficients
print ('Coefficients: ', regr.coef_)
print ('Intercept: ',regr.intercept_)

#now to train fuel consumption

train_x=train[["FUELCONSUMPTION_COMB"]]
test_x=test[["FUELCONSUMPTION_COMB"]]

''''
for the data set included here, we get returns regr.coef_ = 39.35316967 and regr.intercept_ = 124.72605891
'''

plt.scatter(train.ENGINESIZE, train.CO2EMISSIONS,  color='blue')
plt.plot(train_x, regr.coef_[0][0]*train_x + regr.intercept_[0], '-r')
plt.xlabel("Engine size")
plt.ylabel("Emission")

#now to evaluate the model
from sklearn.metrics import r2_score

test_x = np.asanyarray(test[['ENGINESIZE']])
test_y = np.asanyarray(test[['CO2EMISSIONS']])
test_y_ = regr.predict(test_x)

print("Mean absolute error: %.2f" % np.mean(np.absolute(test_y_ - test_y)))
print("Residual sum of squares (MSE): %.2f" % np.mean((test_y_ - test_y) ** 2))
print("R2-score: %.2f" % r2_score(test_y , test_y_) )

'''
from our data set we get returns
Mean absolute error: 23.19
Residual sum of squares (MSE): 882.96
R2-score: 0.78
'''

#another model using the fuelconsumption_comb feature
train_x = train[["FUELCONSUMPTION_COMB"]]

test_x = test[["FUELCONSUMPTION_COMB"]]

regr = linear_model.LinearRegression()

regr.fit(train_x, train_y)
print('Coefficients:', regr.coef_)
print('Intercept:', regr.intercept_)

'''
from our data set we get:
coefficients 16.41864071
intercepts 66.52517116
now to find predictions
'''

predictions = regr.predict(test_x)

#using the prediction and the test_y data , find the MAE

print("Mean Absolute Error %.2f" % np.mean(np.absolute(predictions - test_y)))

